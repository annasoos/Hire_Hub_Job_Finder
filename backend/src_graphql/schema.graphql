type Query {
	feed: String!
}

type Mutation {
	post(position: String!, level: String!,	location: String!,	company: String!,	skills: String!,	description: String!): Job!
	signup(firstName: String!, lastName: String!, email: String!, password: String!): AuthPayload
  login(email: String!, password: String!): AuthPayload
}

# Subscriptions are a GraphQL feature that allows a server to send data to its clients when a specific event happens.
type Subscription {
	newUser: User
	newJob: Job
	# updatedJob: Job
	# deletedJob: Job
}

type User {
	id: ID! # generated by the server
	firstName: String!
	lastName: String!
	email: String!
	password: String!
	posts: [Job!]!
}

type Job {
	id: ID!
	position: String!
	level: String!
	location: String!
	company: String!
	skills: String!
	description: String!
	creator: User # the relation between User and Job should be bi-directional 
}

type AuthPayload {
  token: String
  user: User
}